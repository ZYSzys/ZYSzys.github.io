<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZYSzys</title>
    <description>欢迎来到我的个人站~</description>
    <link>https://github.com/ZYSzys/</link>
    <atom:link href="https://github.com/ZYSzys/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 11 Aug 2017 22:55:23 +0800</pubDate>
    <lastBuildDate>Fri, 11 Aug 2017 22:55:23 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>POJ 1113 Wall(简单凸包)</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1113&quot;&gt;POJ 1113 Wall&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;wall&quot;&gt;Wall&lt;/h2&gt;

&lt;p&gt;Time Limit: 1000MS      Memory Limit: 10000K
Total Submissions: 37869        Accepted: 12907&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;Once upon a time there was a greedy King who ordered his chief Architect to build a wall around the King’s castle. The King was so greedy, that he would not listen to his Architect’s proposals to build a beautiful brick wall with a perfect shape and nice tall towers. Instead, he ordered to build the wall around the whole castle using the least amount of stone and labor, but demanded that the wall should not come closer to the castle than a certain distance. If the King finds that the Architect has used more resources to build the wall than it was absolutely necessary to satisfy those requirements, then the Architect will loose his head. Moreover, he demanded Architect to introduce at once a plan of the wall listing the exact amount of resources that are needed to build the wall.&lt;/p&gt;

&lt;p&gt;Your task is to help poor Architect to save his head, by writing a program that will find the minimum possible length of the wall that he could build around the castle to satisfy King’s requirements.&lt;/p&gt;

&lt;p&gt;The task is somewhat simplified by the fact, that the King’s castle has a polygonal shape and is situated on a flat ground. The Architect has already established a Cartesian coordinate system and has precisely measured the coordinates of all castle’s vertices in feet.
Input&lt;/p&gt;

&lt;p&gt;The first line of the input file contains two integer numbers N and L separated by a space. N (3 &amp;lt;= N &amp;lt;= 1000) is the number of vertices in the King’s castle, and L (1 &amp;lt;= L &amp;lt;= 1000) is the minimal number of feet that King allows for the wall to come close to the castle.&lt;/p&gt;

&lt;p&gt;Next N lines describe coordinates of castle’s vertices in a clockwise order. Each line contains two integer numbers Xi and Yi separated by a space (-10000 &amp;lt;= Xi, Yi &amp;lt;= 10000) that represent the coordinates of ith vertex. All vertices are different and the sides of the castle do not intersect anywhere except for vertices.
Output&lt;/p&gt;

&lt;p&gt;Write to the output file the single number that represents the minimal possible length of the wall in feet that could be built around the castle to satisfy King’s requirements. You must present the integer number of feet to the King, because the floating numbers are not invented yet. However, you must round the result in such a way, that it is accurate to 8 inches (1 foot is equal to 12 inches), since the King will not tolerate larger error in the estimates.&lt;/p&gt;

&lt;p&gt;Sample Input&lt;/p&gt;

&lt;p&gt;9 100
200 400
300 400
300 300
400 300
400 400
500 400
500 200
350 200
200 200&lt;/p&gt;

&lt;p&gt;Sample Output&lt;/p&gt;

&lt;p&gt;1628&lt;/p&gt;

&lt;p&gt;Hint&lt;/p&gt;

&lt;p&gt;结果四舍五入就可以了&lt;/p&gt;

&lt;p&gt;Source&lt;/p&gt;

&lt;p&gt;Northeastern Europe 2001&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;简单的凸包模版题&lt;/h3&gt;
&lt;p&gt;题意: 输入凸包顶点数N和城墙与城堡之间距离L，接下来输入N个凸包顶点的坐标，求城墙周长&lt;/p&gt;

&lt;p&gt;分析: 城墙周长＝凸包周长＋一个以L为半径的圆的周长&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c++
#include &amp;lt;cmath&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;algorithm&amp;gt;
using namespace std;
const int N = 1010;
const double Pi = acos(-1.0);
struct Point
{
    int x, y;
}poi[N];
int stack[N], top;
int Cross(Point p0, Point p1, Point p2)//求出向量 p0p1 和 p0p2的叉积
{
    return ((p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y));
}
double dis(Point p1, Point p2)//求p1, p2两点间距离
{
    return sqrt((double)((p2.x-p1.x)*(p2.x-p1.x)+(p2.y-p1.y)*(p2.y-p1.y)));
}
bool cmp(Point p1, Point p2)
{
    int temp = Cross(poi[0], p1, p2);
    if(temp &amp;gt; 0 || (temp == 0 &amp;amp;&amp;amp; dis(poi[0], p1) &amp;lt; dis(poi[0], p2)))
    {
        return true;
    }
    else
    {
        return false;
    }
}
void Init(int n)
{
    Point p;
    scanf(&quot;%d%d&quot;, &amp;amp;p.x, &amp;amp;p.y);
    for(int i = 1; i &amp;lt; n; i++)
    {
        scanf(&quot;%d%d&quot;, &amp;amp;poi[i].x, &amp;amp;poi[i].y);
        if(p.y &amp;gt; poi[i].y || (p.y == poi[i].y &amp;amp;&amp;amp; p.x &amp;gt; poi[i].x))
        {
            swap(p, poi[i]);
        }
    }
    sort(poi+1, poi+n, cmp);
}
void Graham(int n)
{
    if(n == 1)
    {
        top = 0;
        stack[0] = 0;
    }
    else
    {
        top = 1;
        stack[0] = 0;
        stack[1] = 1;
        for(int i = 2; i &amp;lt; n; i++)
        {
            while(top &amp;gt; 0 &amp;amp;&amp;amp; Cross(poi[stack[top-1]], poi[stack[top]], poi[i]) &amp;lt;= 0)
            {
                top--;
            }
            top++;
            stack[top] = i;
        }
    }
}
int main()
{
    int n, l;
    while(~scanf(&quot;%d%d&quot;, &amp;amp;n, &amp;amp;l))
    {
        Init(n);
        Graham(n);
        double ans = 0;
        for(int i = 0; i &amp;lt; top; i++)
        {
            ans += dis(poi[stack[i]], poi[stack[i+1]]);
        }
        ans += dis(poi[stack[0]], poi[stack[top]]);
        ans += 2 * Pi * l;
        printf(&quot;%d\n&quot;, (int)(ans + 0.5));
    }
    return 0;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://zyszys.github.io&quot;&gt;ZYSzys的博客&lt;/a&gt; » &lt;a href=&quot;https://zyszys.github.io/2017/08/POJ1113/&quot;&gt;POJ 1113 Wall(简单凸包)&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://github.com/ZYSzys/2017/08/POJ1113/</link>
        <guid isPermaLink="true">https://github.com/ZYSzys/2017/08/POJ1113/</guid>
        
        <category>计算几何</category>
        
        
      </item>
    
      <item>
        <title>Markdown工具集</title>
        <description>&lt;h2 id=&quot;httpbaixin--markdownhttpbaixinio20161markdowntool&quot;&gt;转载自：&lt;a href=&quot;http://baixin&quot;&gt;潘柏信的博客&lt;/a&gt; » &lt;a href=&quot;http://baixin.io/2016/1/markdownTool/&quot;&gt;Markdown工具集&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;markdown&quot;&gt;什么是 Markdown&lt;/h3&gt;

&lt;p&gt;　　Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：如您正在阅读的这篇文章。它使用简单的符号标记不同的标题，分割不同的段落，&lt;strong&gt;粗体&lt;/strong&gt; 或者 &lt;em&gt;斜体&lt;/em&gt; 某些文字.&lt;/p&gt;

&lt;p&gt;　　很多产品的文档也是用markdown编写的，并且以“README.MD”的文件名保存在软件的目录下面。             &lt;br /&gt;
　　&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;一些基本语法&lt;/h3&gt;

&lt;p&gt;标题          &lt;br /&gt;
H1 :# Header 1          &lt;br /&gt;
H2 :## Header 2         &lt;br /&gt;
H3 :### Header 3         &lt;br /&gt;
H4 :#### Header 4         &lt;br /&gt;
H5 :##### Header 5          &lt;br /&gt;
H6 :###### Header 6    &lt;br /&gt;
链接 :&lt;a href=&quot;URL&quot;&gt;Title&lt;/a&gt;      &lt;br /&gt;
加粗 :&lt;strong&gt;Bold&lt;/strong&gt;      &lt;br /&gt;
斜体字 :&lt;em&gt;Italics&lt;/em&gt;       &lt;br /&gt;
&lt;em&gt;删除线 :~~text~~        &lt;br /&gt;
段落 : 段落之间空一行         &lt;br /&gt;
换行符 : 一行结束时输入两个空格         &lt;br /&gt;
列表 :&lt;/em&gt; 添加星号成为一个新的列表项。        &lt;br /&gt;
引用 :&amp;gt; 引用内容             &lt;br /&gt;
内嵌代码 : &lt;code class=&quot;highlighter-rouge&quot;&gt;alert(&#39;Hello World&#39;);&lt;/code&gt;      &lt;br /&gt;
画水平线 (HR) :——–&lt;/p&gt;

&lt;p&gt;css 的大部分语法同样可以在 markdown 上使用，但不同的渲染器渲染出来的 markdown 内容样式也不一样，下面这些链接里面有 markdown 基本语法，你也可以在下面几个平台上尝试着写一些。&lt;/p&gt;

&lt;h3 id=&quot;markdown-&quot;&gt;一些好用的 Markdown 编辑器&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mahua.jser.me/?utm_source=mindstore.io&quot;&gt;MaHua&lt;/a&gt; 在线 Markdown 编辑器 ,无须测试。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/markdown/image1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mdp.tylingsoft.com/&quot;&gt;Markdown Plus&lt;/a&gt; 一款 Markdown 编辑器，可以支持添加任务列表、emoji、流程图等。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/markdown/image2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zybuluo.com/cmd/?utm_source=mindstore.io&quot;&gt;Cmd Markdown&lt;/a&gt; 作业部落在线 Markdown 编辑器推出桌面版客户端啦，全平台支援。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/markdown/image3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/MacDownApp/macdown&quot;&gt;Macdown&lt;/a&gt; Github 上开源的 Mac 平台上的 Markdown 编辑器&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gitbook.com/editor?utm_source=mindstore.io&quot;&gt;GitBook Editor&lt;/a&gt; 一款团队在线编辑文档工具。可以轻松书写笔记，支持团队协同编辑。同时支持 Markdown 语法，还保持了印象笔记的风格并可在线预览。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.glamdevelopment.com/outlinely?utm_source=mindstore.io&quot;&gt;Outlinely&lt;/a&gt; 界面简洁大方的大纲类 Mac 软件，使用起来很简单，而且支持输出 Markdown 格式。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://classeur.io/?utm_source=mindstore.io&quot;&gt;Classeur&lt;/a&gt; 实用简洁的 Markdown 写作工具，快速上手。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/geekcompany/DeerResume?utm_source=mindstore.io&quot;&gt;DeerResume&lt;/a&gt; 程序员专用 MarkDown 简历制作在线工具。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 08 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://github.com/ZYSzys/2017/08/markdownTool/</link>
        <guid isPermaLink="true">https://github.com/ZYSzys/2017/08/markdownTool/</guid>
        
        <category>转载</category>
        
        
      </item>
    
      <item>
        <title>Mac知识整合</title>
        <description>&lt;h2 id=&quot;httpbaixin--httpbaixinio201611mactips&quot;&gt;转载自：&lt;a href=&quot;http://baixin&quot;&gt;潘柏信的博客&lt;/a&gt; » &lt;a href=&quot;http://baixin.io/2016/11/macTips/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;dsstore-&quot;&gt;.DS_Store 文件是什么？&lt;/h3&gt;

&lt;p&gt;.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件，如文件的图标位置或背景色，相当于 Windows 的 desktop.ini。&lt;/p&gt;

&lt;p&gt;1，禁止.DS_store 生成：           &lt;br /&gt;
打开 “终端” ，复制黏贴下面的命令，回车执行，重启Mac即可生效。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2，恢复.DS_store生成：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
defaults delete com.apple.desktopservices DSDontWriteNetworkStores
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;显示隐藏文件&lt;/h3&gt;

&lt;p&gt;在终端执行命令，显示隐藏文件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
defaults write com.apple.finder AppleShowAllFiles -bool true
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;恢复隐藏&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
defaults write com.apple.finder AppleShowAllFiles -bool false
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;执行命令后需要重新打开能看到效果。&lt;/p&gt;

&lt;h3 id=&quot;pyhton-&quot;&gt;切换 Pyhton 环境&lt;/h3&gt;

&lt;p&gt;我本地之前 Python 环境是 2.7.10 ，然后学习 Tensorflow 的时候，安装了 Python 3.5.2 ，把系统默认 Pyton 环境也设置成了 3.5.2 版本，今天运行以前写的 python 脚本发现运行不了了，因为python 2.7 和 3.5 的 语法有挺多改动，现在我需要把系统的 python 环境回退到 2.7。&lt;/p&gt;

&lt;p&gt;可以直接修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt; 文件。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1、修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;vim ~/.bash_profile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
修改方式有很多种，使用 vim  ，或者 cd ~/ 然后 open . 打开文件夹，找到 .bash_profile 文件，双击打开。
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2、在&lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; 文件里添加下面参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
alias python=&quot;/System/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3、使用命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;source ~/.bash_profile&lt;/code&gt; 或者重启 终端 就 OK 了 。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在你再在终端输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; 就会发现，显示的信息为 2.7 了&lt;/p&gt;

&lt;p&gt;```bash&lt;/p&gt;

&lt;p&gt;Python 2.7.10 (default, Oct 23 2015, 19:19:21) 
[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin
Type “help”, “copyright”, “credits” or “license” for more information.&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h3 id=&quot;sshkey&quot;&gt;生成SSHKey过程&lt;/h3&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;1.查看是否已经有了ssh密钥：&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/.ssh&lt;/code&gt; ，如果没有密钥则不会有此文件夹，有则备份删除。  &lt;br /&gt;
2.生存密钥：ssh-keygen -t rsa -C “test@gmail.com”。   按3个回车，密码为空。&lt;/p&gt;

&lt;p&gt;Your identification has been saved in /home/tekkub/.ssh/id_rsa.
Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.
The key fingerprint is:
………………  &lt;br /&gt;
最后得到了两个文件：id_rsa和id_rsa.pub&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h3 id=&quot;svn-versions-a&quot;&gt;使用版本控制器 SVN (versions) 添加.a库&lt;/h3&gt;

&lt;p&gt;Xcode 自带的 svn 和 Versions 以及一些其它工具都不能上传”.a”文件&lt;/p&gt;

&lt;p&gt;下面是在 Mac 上如何把 .a 添加到 SVN 里面的&lt;/p&gt;

&lt;p&gt;1、打开终端，输入cd，空格，然后将需要上传的 .a 文件所在的文件夹（不是.a文件） 拖拽到终端（此办法无需输入繁琐的路径，快捷方便） 回车&lt;/p&gt;

&lt;p&gt;2、之后再输入如下命令：&lt;code class=&quot;highlighter-rouge&quot;&gt;svn add libGoogleAnalytics.a&lt;/code&gt; ，回车&lt;/p&gt;

&lt;p&gt;之后会出现：A (bin) libGoogleAnalytics.a&lt;/p&gt;

&lt;p&gt;表示添加成功，打开 Versions 就可以看到，刚才添加的 .a 文件，此时就可以手动上传了。&lt;/p&gt;

&lt;p&gt;另外，请注意路径的正确性。&lt;/p&gt;

</description>
        <pubDate>Tue, 08 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://github.com/ZYSzys/2017/08/macTips/</link>
        <guid isPermaLink="true">https://github.com/ZYSzys/2017/08/macTips/</guid>
        
        <category>转载</category>
        
        
      </item>
    
      <item>
        <title>Git教程</title>
        <description>&lt;h2 id=&quot;httpbaixin--httpbaixinio201607gittutorial&quot;&gt;转载自：&lt;a href=&quot;http://baixin&quot;&gt;潘柏信的博客&lt;/a&gt; » &lt;a href=&quot;http://baixin.io/2016/07/GitTutorial/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;介绍&lt;/h3&gt;

&lt;p&gt;　　Git是做项目的版本管理，你也可以称它们为版本管理工具。假如现在你有一个文件夹，里面可以是项目，也可以是你的个人笔记(如我这个博客)，或者是你的简历、毕业设计等等，都可以使用git来管理。&lt;/p&gt;

&lt;p&gt;　　目前常用的版本控制器有Git和SVN，即使这两个你没有全用过，至少也会听过，我这里以Git为例，个人比较喜欢Git，你也可以看看这篇文章：&lt;a href=&quot;http://www.worldhello.net/2012/04/12/why-git-is-better-than-svn.html&quot;&gt;为什么Git比SVN好&lt;/a&gt;。我使用的是Mac，Mac上没自带Git环境，但是作为iOS开发者，我安装Xcode的时候，Xcode里是有自带Git的，所以我不需要考虑怎么去安装Git了。&lt;/p&gt;

&lt;h3 id=&quot;git&quot;&gt;安装Git&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;在Mac OS X上安装Git&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;提供两种方法参考：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1、通过homebrew安装Git，具体方法请参考&lt;a href=&quot;http://brew.sh/&quot;&gt;homebrew的文档&lt;/a&gt;    &lt;br /&gt;
2、直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;在Windows上安装Git&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;从&lt;a href=&quot;https://git-for-windows.github.io&quot;&gt;https://git-for-windows.github.io&lt;/a&gt; 下载，然后按默认选项安装即可，安装完成后，在开始菜单里找到“Git”-&amp;gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;git-1&quot;&gt;配置Git&lt;/h3&gt;

&lt;p&gt;安装完成后，还需要最后一步设置，在命令行输入：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;$ git config –global user.name “Your Name”&lt;/li&gt;
    &lt;li&gt;$ git config –global user.email “email@example.com”&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;“Your Name”： 是每次提交时所显示的用户名，因为Git是分布式版本控制系统，当我们push到远端时，就需要区分每个提交记录具体是谁提交的，这个”Your Name”就是最好的区分。&lt;/p&gt;

&lt;p&gt;“email@example.com”： 是你远端仓库的email&lt;/p&gt;

&lt;p&gt;–global：用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然我们也可以对某个仓库指定不同的用户名和Email地址。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;开始使用-建立仓库：&lt;/h3&gt;

&lt;p&gt;你在目标文件夹下使命令：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;git init  （创建.git文件）&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;就会创建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; 隐藏文件，相当于已经建立了一个本地仓库。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;添加到暂存区：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;git add .   （全部添加到暂存区）&lt;/li&gt;
    &lt;li&gt;git commit -m ‘ first commit’  （提交暂存区的记录到本地仓库）&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-2&quot;&gt;其它&lt;/h3&gt;

&lt;p&gt;git branc 查看时如出现&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;(HEAD detached at analytics_v2)&lt;/li&gt;
    &lt;li&gt;dev&lt;/li&gt;
    &lt;li&gt;master&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;代表现在已经进入一个临时的HEAD，可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b temp&lt;/code&gt; 创建一个 temp branch，这样临时HEAD上修改的东西就不会被丢掉了。
然后切换到 dev 分支上，在使用 git branch merge temp，就可以把 temp 分支上的代码合并到 dev 上了。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 08 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://github.com/ZYSzys/2017/08/GitTutorial/</link>
        <guid isPermaLink="true">https://github.com/ZYSzys/2017/08/GitTutorial/</guid>
        
        <category>转载</category>
        
        
      </item>
    
  </channel>
</rss>
